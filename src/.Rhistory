setwd('~/Dropbox/research-at-sc/phd-thesis/assets/mle')
rm(list=ls(all=TRUE))
source('./loading.r')
seed_number = 1312
set.seed(seed_number)
#*******************************************************************#
# #                          Simulation Example
# #*******************************************************************#
N  <- 2000 # sample size
c  <- 5 # group size
r  <- 4 # order of splines
m  <- 8# number of interior knots
Se <- c(0.95,0.95) # sensitivity
Sp <- c(0.95,0.95) # specificity
X  <- cbind(rnorm(N),
rnorm(N),
rbinom(N,1,0.1),
rbinom(N,1,0.2),
rbinom(N,1,0.3),
rbinom(N,1,0.5)) # covariate
links<-list(links[[1]],links[[2]]) # true link functions g_k's
# true responese and data generated
Y <- SIM_true(X,beta,links,delta) # need true Y status to simulate data
cj<-sample(c(c(rep(4,125),rep(5,300))))
DATA <- SIM(X,Y,N,cj,Se,Sp) # summary of simulated data
cj <- DATA$cj # group setting
data <- DATA$data
colSums(Y)/N
final.par<-MLE(X, cj, data, Se, Sp, r, m, seed=seed_number)
ss=c(1)
tail(ss,2)
tail(ss,1)
round(NA,2)
round(NA,2)*100
#*******************************************************************#
# CT.result and CT.result 67 & 67
# normalize age -1 1, -0.5 0.5
# generate group test response
#
#
#
#
#
#*******************************************************************#
#                           Preparation
#*******************************************************************#
setwd('~/Dropbox/research-at-sc/phd-thesis/assets/mle')
rm(list=ls(all=TRUE))
source('./loading.r')
seed_number = 1312
set.seed(seed_number)
#*******************************************************************#
# #                          Simulation Example
# #*******************************************************************#
N  <- 2000 # sample size
c  <- 5 # group size
r  <- 4 # order of splines
m  <- 8# number of interior knots
Se <- c(0.95,0.95) # sensitivity
Sp <- c(0.95,0.95) # specificity
X  <- cbind(rnorm(N),
rnorm(N),
rbinom(N,1,0.1),
rbinom(N,1,0.2),
rbinom(N,1,0.3),
rbinom(N,1,0.5)) # covariate
links<-list(links[[1]],links[[2]]) # true link functions g_k's
# true responese and data generated
Y <- SIM_true(X,beta,links,delta) # need true Y status to simulate data
cj<-sample(c(c(rep(4,125),rep(5,300))))
DATA <- SIM(X,Y,N,cj,Se,Sp) # summary of simulated data
cj <- DATA$cj # group setting
data <- DATA$data
colSums(Y)/N
final.par<-MLE(X, cj, data, Se, Sp, r, m, seed=seed_number)
#*******************************************************************#
# CT.result and CT.result 67 & 67
# normalize age -1 1, -0.5 0.5
# generate group test response
#
#
#
#
#
#*******************************************************************#
#                           Preparation
#*******************************************************************#
setwd('~/Dropbox/research-at-sc/phd-thesis/assets/mle')
rm(list=ls(all=TRUE))
source('./loading.r')
seed_number = 1312
set.seed(seed_number)
#*******************************************************************#
# #                          Simulation Example
# #*******************************************************************#
N  <- 2000 # sample size
c  <- 5 # group size
r  <- 4 # order of splines
m  <- 8# number of interior knots
Se <- c(0.95,0.95) # sensitivity
Sp <- c(0.95,0.95) # specificity
X  <- cbind(rnorm(N),
rnorm(N),
rbinom(N,1,0.1),
rbinom(N,1,0.2),
rbinom(N,1,0.3),
rbinom(N,1,0.5)) # covariate
links<-list(links[[1]],links[[2]]) # true link functions g_k's
# true responese and data generated
Y <- SIM_true(X,beta,links,delta) # need true Y status to simulate data
cj<-sample(c(c(rep(4,125),rep(5,300))))
DATA <- SIM(X,Y,N,cj,Se,Sp) # summary of simulated data
cj <- DATA$cj # group setting
data <- DATA$data
colSums(Y)/N
final.par<-MLE(X, cj, data, Se, Sp, r, m, seed=seed_number)
#*******************************************************************#
# CT.result and CT.result 67 & 67
# normalize age -1 1, -0.5 0.5
# generate group test response
#
#
#
#
#
#*******************************************************************#
#                           Preparation
#*******************************************************************#
setwd('~/Dropbox/research-at-sc/phd-thesis/assets/mle')
rm(list=ls(all=TRUE))
source('./loading.r')
seed_number = 1312
set.seed(seed_number)
#*******************************************************************#
# #                          Simulation Example
# #*******************************************************************#
N  <- 2000 # sample size
c  <- 5 # group size
r  <- 4 # order of splines
m  <- 8# number of interior knots
Se <- c(0.95,0.95) # sensitivity
Sp <- c(0.95,0.95) # specificity
X  <- cbind(rnorm(N),
rnorm(N),
rbinom(N,1,0.1),
rbinom(N,1,0.2),
rbinom(N,1,0.3),
rbinom(N,1,0.5)) # covariate
links<-list(links[[1]],links[[2]]) # true link functions g_k's
# true responese and data generated
Y <- SIM_true(X,beta,links,delta) # need true Y status to simulate data
cj<-sample(c(c(rep(4,125),rep(5,300))))
DATA <- SIM(X,Y,N,cj,Se,Sp) # summary of simulated data
cj <- DATA$cj # group setting
data <- DATA$data
colSums(Y)/N
final.par<-MLE(X, cj, data, Se, Sp, r, m, seed=seed_number)
#*******************************************************************#
# CT.result and CT.result 67 & 67
# normalize age -1 1, -0.5 0.5
# generate group test response
#
#
#
#
#
#*******************************************************************#
#                           Preparation
#*******************************************************************#
setwd('~/Dropbox/research-at-sc/phd-thesis/assets/mle')
rm(list=ls(all=TRUE))
source('./loading.r')
seed_number = 1312
set.seed(seed_number)
#*******************************************************************#
# #                          Simulation Example
# #*******************************************************************#
N  <- 2000 # sample size
c  <- 5 # group size
r  <- 4 # order of splines
m  <- 8# number of interior knots
Se <- c(0.95,0.95) # sensitivity
Sp <- c(0.95,0.95) # specificity
X  <- cbind(rnorm(N),
rnorm(N),
rbinom(N,1,0.1),
rbinom(N,1,0.2),
rbinom(N,1,0.3),
rbinom(N,1,0.5)) # covariate
links<-list(links[[1]],links[[2]]) # true link functions g_k's
# true responese and data generated
Y <- SIM_true(X,beta,links,delta) # need true Y status to simulate data
cj<-sample(c(c(rep(4,125),rep(5,300))))
DATA <- SIM(X,Y,N,cj,Se,Sp) # summary of simulated data
cj <- DATA$cj # group setting
data <- DATA$data
colSums(Y)/N
final.par<-MLE(X, cj, data, Se, Sp, r, m, seed=seed_number)
#*******************************************************************#
# CT.result and CT.result 67 & 67
# normalize age -1 1, -0.5 0.5
# generate group test response
#
#
#
#
#
#*******************************************************************#
#                           Preparation
#*******************************************************************#
setwd('~/Dropbox/research-at-sc/phd-thesis/assets/mle')
rm(list=ls(all=TRUE))
source('./loading.r')
seed_number = 1312
set.seed(seed_number)
#*******************************************************************#
# #                          Simulation Example
# #*******************************************************************#
N  <- 2000 # sample size
c  <- 5 # group size
r  <- 4 # order of splines
m  <- 8# number of interior knots
Se <- c(0.95,0.95) # sensitivity
Sp <- c(0.95,0.95) # specificity
X  <- cbind(rnorm(N),
rnorm(N),
rbinom(N,1,0.1),
rbinom(N,1,0.2),
rbinom(N,1,0.3),
rbinom(N,1,0.5)) # covariate
links<-list(links[[1]],links[[2]]) # true link functions g_k's
# true responese and data generated
Y <- SIM_true(X,beta,links,delta) # need true Y status to simulate data
cj<-sample(c(c(rep(4,125),rep(5,300))))
DATA <- SIM(X,Y,N,cj,Se,Sp) # summary of simulated data
cj <- DATA$cj # group setting
data <- DATA$data
colSums(Y)/N
final.par<-MLE(X, cj, data, Se, Sp, r, m, seed=seed_number)
#*******************************************************************#
# CT.result and CT.result 67 & 67
# normalize age -1 1, -0.5 0.5
# generate group test response
#
#
#
#
#
#*******************************************************************#
#                           Preparation
#*******************************************************************#
setwd('~/Dropbox/research-at-sc/phd-thesis/assets/src')
rm(list=ls(all=TRUE))
source('./loading.r')
seed_number = 1312
set.seed(seed_number)
#*******************************************************************#
# #                          Simulation Example
# #*******************************************************************#
N  <- 2000 # sample size
c  <- 5 # group size
r  <- 4 # order of splines
m  <- 8# number of interior knots
Se <- c(0.95,0.95) # sensitivity
Sp <- c(0.95,0.95) # specificity
X  <- cbind(rnorm(N),
rnorm(N),
rbinom(N,1,0.1),
rbinom(N,1,0.2),
rbinom(N,1,0.3),
rbinom(N,1,0.5)) # covariate
links<-list(links[[1]],links[[2]]) # true link functions g_k's
# true responese and data generated
Y <- SIM_true(X,beta,links,delta) # need true Y status to simulate data
cj<-sample(c(c(rep(4,125),rep(5,300))))
DATA <- SIM(X,Y,N,cj,Se,Sp) # summary of simulated data
cj <- DATA$cj # group setting
data <- DATA$data
colSums(Y)/N
final.par<-MLE(X, cj, data, Se, Sp, r, m, seed=seed_number)
#*******************************************************************#
# CT.result and CT.result 67 & 67
# normalize age -1 1, -0.5 0.5
# generate group test response
#
#
#
#
#
#*******************************************************************#
#                           Preparation
#*******************************************************************#
setwd('~/Dropbox/research-at-sc/phd-thesis/assets/src')
rm(list=ls(all=TRUE))
source('./loading.r')
seed_number = 1312
set.seed(seed_number)
#*******************************************************************#
# #                          Simulation Example
# #*******************************************************************#
N  <- 3000 # sample size
c  <- 5 # group size
r  <- 4 # order of splines
m  <- 8# number of interior knots
Se <- c(0.95,0.95) # sensitivity
Sp <- c(0.95,0.95) # specificity
X  <- cbind(rnorm(N),
rnorm(N),
rbinom(N,1,0.1),
rbinom(N,1,0.2),
rbinom(N,1,0.3),
rbinom(N,1,0.5)) # covariate
links<-list(links[[1]],links[[2]]) # true link functions g_k's
# true responese and data generated
Y <- SIM_true(X,beta,links,delta) # need true Y status to simulate data
cj<-sample(c(c(rep(4,125),rep(5,500))))
DATA <- SIM(X,Y,N,cj,Se,Sp) # summary of simulated data
cj <- DATA$cj # group setting
data <- DATA$data
colSums(Y)/N
final.par<-MLE(X, cj, data, Se, Sp, r, m, seed=seed_number)
#*******************************************************************#
# CT.result and CT.result 67 & 67
# normalize age -1 1, -0.5 0.5
# generate group test response
#
#
#
#
#
#*******************************************************************#
#                           Preparation
#*******************************************************************#
setwd('~/Dropbox/research-at-sc/phd-thesis/assets/src')
rm(list=ls(all=TRUE))
source('./loading.r')
seed_number = 1312
set.seed(seed_number)
#*******************************************************************#
# #                          Simulation Example
# #*******************************************************************#
N  <- 3000 # sample size
c  <- 5 # group size
r  <- 4 # order of splines
m  <- 8# number of interior knots
Se <- c(0.95,0.95) # sensitivity
Sp <- c(0.95,0.95) # specificity
X  <- cbind(rnorm(N),
rnorm(N),
rbinom(N,1,0.1),
rbinom(N,1,0.2),
rbinom(N,1,0.3),
rbinom(N,1,0.5)) # covariate
links<-list(links[[1]],links[[2]]) # true link functions g_k's
# true responese and data generated
Y <- SIM_true(X,beta,links,delta) # need true Y status to simulate data
cj<-sample(c(c(rep(4,125),rep(5,500))))
DATA <- SIM(X,Y,N,cj,Se,Sp) # summary of simulated data
cj <- DATA$cj # group setting
data <- DATA$data
colSums(Y)/N
final.par<-MLE(X, cj, data, Se, Sp, r, m, seed=seed_number)
#*******************************************************************#
#                        Simulation Graphing
#*******************************************************************#
par(mfrow=c(1,2))
est.beta<-final.par$beta
sort.u<-sort(X%*%c(1,beta))
#sort.u<-sort(X%*%est.beta)
sol1<-final.par$alpha1
sol2<-final.par$alpha2
plot(sort.u,eta1(sort.u),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[1](u)));
lines(sort.u,eta.Bsp(sort.u,sol1,r,m),col='red',lty=3,lwd=2)
plot(sort.u,eta2(sort.u),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[2](u)));
#plot(sort.u,eta2(sort.u),'l')
lines(sort.u,eta.Bsp(sort.u,sol2,r,m),col='red',lty=3,lwd=2)
par(mfrow=c(1,2))
est.beta<-final.par$beta
sort.u<-sort(X%*%c(1,est.beta))
sol1<-final.par$alpha1
sol2<-final.par$alpha2
plot(sort.u,eta1(sort.u),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[1](u)));
lines(sort.u,eta.Bsp(sort.u,sol1,r,m),col='red',lty=3,lwd=2)
plot(sort.u,eta2(sort.u),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[2](u)));
#plot(sort.u,eta2(sort.u),'l')
lines(sort.u,eta.Bsp(sort.u,sol2,r,m),col='red',lty=3,lwd=2)
#*******************************************************************#
par(mfrow=c(1,2))
est.beta<-final.par$beta
sort.u<-sort(X%*%c(1,est.beta))
sol1<-final.par$alpha1
sol2<-final.par$alpha2
plot(sort.u,links[[1]](sort.u),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[1](u)));
lines(sort.u,g(sort.u,sol1,r,m),col='red',lty=3,lwd=2)
plot(sort.u,links[[2]](sort.u),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[2](u)));
#plot(sort.u,eta2(sort.u),'l')
lines(sort.u,g(sort.u,sol2,r,m),col='red',lty=3,lwd=2)
#*
g(sort.u,sol1,r,m)
links[[1]](sort.u)
cbind(links[[1]](sort.u),g(sort.u,sol1,r,m))
log(g(sort.u,sol1,r,m)/(1-g(sort.u,sol1,r,m)))
gg=log(g(sort.u,sol1,r,m)/(1-g(sort.u,sol1,r,m)))
eta1(sort.u)
range(eta1(sort.u))
range(gg)
log((1-links[[1]](sort.u))/links[[1]](sort.u))
ggg=log((1-links[[1]](sort.u))/links[[1]](sort.u))
range(ggg)
range(eta1(ssort.default()))
range(eta1(sort.u))
#                        Simulation Graphing
#*******************************************************************#
par(mfrow=c(1,2))
est.beta<-final.par$beta
sort.u<-sort(X%*%c(1,est.beta))
sol1<-final.par$alpha1
sol2<-final.par$alpha2
plot(sort.u,-eta1(sort.u),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[1](u)));
lines(sort.u,eta.Bsp(sort.u,sol1,r,m),col='red',lty=3,lwd=2)
plot(sort.u,-eta2(sort.u),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[2](u)));
#plot(sort.u,eta2(sort.u),'l')
lines(sort.u,eta.Bsp(sort.u,sol2,r,m),col='red',lty=3,lwd=2)
#*******************************************************************#
#                        Simulation Graphing
#*******************************************************************#
par(mfrow=c(1,2))
est.beta<-final.par$beta
sort.u<-sort(X%*%c(1,est.beta))
sol1<-final.par$alpha1
sol2<-final.par$alpha2
plot(sort.u,eta1(sort.u),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[1](u)));
lines(sort.u,eta.Bsp(sort.u,sol1,r,m),col='red',lty=3,lwd=2)
plot(sort.u,eta2(sort.u),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[2](u)));
#plot(sort.u,eta2(sort.u),'l')
lines(sort.u,eta.Bsp(sort.u,sol2,r,m),col='red',lty=3,lwd=2)
#*******************************************************************#
range(eta1(sort.u))
#*******************************************************************#
par(mfrow=c(1,2))
est.beta<-final.par$beta
sort.u<-sort(X%*%c(1,est.beta))
sol1<-final.par$alpha1
sol2<-final.par$alpha2
plot(sort.u,log((1-links[[1]](sort.u))/links[[1]](sort.u)),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[1](u)));
lines(sort.u,eta.Bsp(sort.u,sol1,r,m),col='red',lty=3,lwd=2)
plot(sort.u,log((1-links[[2]](sort.u))/links[[2]](sort.u)),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[2](u)));
#plot(sort.u,eta2(sort.u),'l')
lines(sort.u,eta.Bsp(sort.u,sol2,r,m),col='red',lty=3,lwd=2)
#*******************************************************************#
ggg=log((1-links[[1]](sort.u))/links[[1]](sort.u))
#*******************************************************************#
#                        Simulation Graphing
#*******************************************************************#
par(mfrow=c(1,2))
est.beta<-final.par$beta
sort.u<-sort(X%*%c(1,est.beta))
sol1<-final.par$alpha1
sol2<-final.par$alpha2
plot(sort.u,log((links[[1]](sort.u))/(1-links[[1]](sort.u))),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[1](u)));
lines(sort.u,eta.Bsp(sort.u,sol1,r,m),col='red',lty=3,lwd=2)
plot(sort.u,log((1-links[[2]](sort.u))/links[[2]](sort.u)),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[2](u)));
#plot(sort.u,eta2(sort.u),'l')
lines(sort.u,eta.Bsp(sort.u,sol2,r,m),col='red',lty=3,lwd=2)
#*******************************************************************#
#
par(mfrow=c(1,2))
est.beta<-final.par$beta
sort.u<-sort(X%*%c(1,est.beta))
sol1<-final.par$alpha1
sol2<-final.par$alpha2
plot(sort.u,log((links[[1]](sort.u))/(1-links[[1]](sort.u))),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[1](u)));
lines(sort.u,eta.Bsp(sort.u,sol1,r,m),col='red',lty=3,lwd=2)
plot(sort.u,log((links[[2]](sort.u))/(1-links[[2]](sort.u))),type='l',col='blue',lwd=2,
xlab=expression(u),
ylab=expression(hat(eta)[2](u)));
#plot(sort.u,eta2(sort.u),'l')
lines(sort.u,eta.Bsp(sort.u,sol2,r,m),col='red',lty=3,lwd=2)
#*******************************************************************#
install.packages('crayon')
install.packages('crayon')
install.packages("crayon")
